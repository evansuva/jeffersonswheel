<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Jefferson&#039;s Wheel &#187; Program Analysis</title>
	<atom:link href="http://www.jeffersonswheel.org/category/program-analysis/feed" rel="self" type="application/rss+xml" />
	<link>https://www.jeffersonswheel.org</link>
	<description>Security Research at the University of Virginia</description>
	<lastBuildDate>Sun, 14 Oct 2018 03:12:33 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.5.1</generator>
		<item>
		<title>Why hasn&#8217;t Cross-Site Scripting been solved?</title>
		<link>https://www.jeffersonswheel.org/2017/why-hasnt-cross-site-scripting-been-solved</link>
		<comments>https://www.jeffersonswheel.org/2017/why-hasnt-cross-site-scripting-been-solved#comments</comments>
		<pubDate>Sun, 31 Dec 2017 21:49:26 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Security]]></category>

		<guid isPermaLink="false">https://www.jeffersonswheel.org/?p=837</guid>
		<description><![CDATA[By Haina Li Introduction In 2017, Bugcrowd reported that cross-site scripting (XSS) remains as the number one vulnerability found on the web, accounting for 25% of the bugs found and submitted to the bug bounty program. Additionally, XSS has remained in the top 3 on the list of the web’s top vulnerabilities for the recent [...]]]></description>
				<content:encoded><![CDATA[<p>By <a href="https://hainali.github.io/"><b>Haina Li</b></a></p>
<h2>Introduction</h2>
<p>
In 2017, <a href="https://pages.bugcrowd.com/hubfs/Bugcrowd-2017-State-of-Bug-Bounty-Report.pdf">Bugcrowd</a> reported that cross-site scripting (XSS) remains as the number one vulnerability found on the web, accounting for 25% of the bugs found and submitted to the bug bounty program. Additionally, XSS has remained in the top 3 on the <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">list of the web’s top vulnerabilities</a> for the recent years. Over the 17 years since XSS was <a href="https://msdn.microsoft.com/en-us/library/cc750326.aspx">first recognized by Microsoft in 2000</a>, XSS has been the focus of intense academic research and development of penetration testing tools, yet we are still finding vulnerabilities even in top websites such as Facebook and Google. In this blog post, we explore some of the reasons why XSS is still a major problem today.
</p>
<h2>XSS has evolved</h2>
<p>
XSS evolved while modern applications became more complex than the static pages that they once were. While reflected and stored XSS have not disappeared because both server and client-side logic have become more elaborate, the pattern of replacing server-side logic with client-side JavaScript gave rise to <a href="http://www.webappsec.org/projects/articles/071105.shtml">DOM-Based vulnerabilities</a>. Additionally, server-side XSS prevention tools that examined deviations between the request and response (<a href="http://ieeexplore.ieee.org/abstract/document/4721570/">XSSDS</a>) do not work for DOM-Based vulnerabilities because the entire flow of malicious data from the source to the sink is contained within the browser and do not go through the server.
</p>
<p>
New methods that do prevent DOM-Based XSS attacks include XSS Filters and CSP. These myriad of sophisticated tools aimed to achieve the seemingly simple purpose of escaping user-provided content. As it stands currently, these tools are not able to catch all XSS vulnerabilities, and escaping everything all the time would break an web application altogether. For example, a recent work by Lekis et al. [<a href="https://dustri.org/b/files/papers/9bc7dd6f063509ecffef7c178ef817e788f1d57319f27deda422c4b40704ff29_ccs_gadgets.pdf">PDF</a>]<br />
 describes a new attack that was missed by every existing XSS prevention technique. In the new attack, the injected payload is benign-looking HTML but can be transformed by script gadgets to behave maliciously.</p>
<h2>The effectiveness of web penetration tools are limited</h2>
<p>In a study of automated black-box web application vulnerability testing by Bau et al. [<a href="https://theory.stanford.edu/~jcm/papers/pci_oakland10.pdf">PDF</a>], researchers tested commercial scanners such as McAfee and IBM and found that the average scanner XSS vulnerability detection rates were 62.5, 15. and 11.25, respectively, for reflected, stored, and advanced XSS that used non-standard tags and keywords. The study found that the scanners were effective in finding straightforward, textbook XSS vulnerabilities, but lack sufficient modeling of more complex XSS with respect to the specific web application. Web application scanners are designed using a reactive approach, converting new vulnerabilities into test vectors only after they&#8217;ve become a problem. When it comes to stored XSS, XSS scanners also struggle to link an event to a subsequent, later observation. These scanners are also often difficult to configure and often take too long if they were set to fuzz every possible location in a large and complicated web application.  </p>
<h2>Conclusion</h2>
<p>As with most web vulnerabilities, XSS is not going away anytime soon because of the constant evolving technologies of the web and the challenges in developing penetration tools with high true-positive rates. However, we may be able to eliminate most of the client-side security issues by replacing JavaScript with a new language that exhibits better control-flow integrity, such as <a href="http://webassembly.org/docs/security/">WebAssembly</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2017/why-hasnt-cross-site-scripting-been-solved/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Weilin&#8217;s Summer of Code</title>
		<link>https://www.jeffersonswheel.org/2016/weilins-summer-of-code</link>
		<comments>https://www.jeffersonswheel.org/2016/weilins-summer-of-code#comments</comments>
		<pubDate>Sat, 06 Feb 2016 01:44:39 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Security]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=632</guid>
		<description><![CDATA[Google&#8217;s Open Source blog has a story by Weilin Xu about his experiences in their Summer of Code before he came to UVA: Coming to America: how Google Summer of Code helped change my life, 3 February 2016.]]></description>
				<content:encoded><![CDATA[<p>Google&#8217;s Open Source blog has a story by Weilin Xu about his experiences in their Summer of Code before he came to UVA: <a href="http://google-opensource.blogspot.com/2016/02/coming-to-america-how-google-summer-of.html"><em>Coming to America: how Google Summer of Code helped change my life</em></a>, 3 February 2016.</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2016/weilins-summer-of-code/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Dormant Malicious Code Discovered on Thousands of Websites</title>
		<link>https://www.jeffersonswheel.org/2015/dormant-malicious-code-discovered-on-thousands-of-websites</link>
		<comments>https://www.jeffersonswheel.org/2015/dormant-malicious-code-discovered-on-thousands-of-websites#comments</comments>
		<pubDate>Tue, 29 Dec 2015 17:28:42 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Alumni]]></category>
		<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Security]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=620</guid>
		<description><![CDATA[Here&#8217;s the latest from Yuchen Zhou (PhD 2015, now at Palo Alto Networks): Dormant Malicious Code Discovered on Thousands of Websites, Yuchen Zhou and Wei Xu, Palo Alto Networks Blog, 14 November 2015. During our continuous monitoring for a 24-hour period from November 11, 2015 to November 12, 2015, eight days after the initial discovery, [...]]]></description>
				<content:encoded><![CDATA[<p>Here&#8217;s the latest from <a href="http://www.yuchenzhou.info/">Yuchen Zhou</a> (PhD 2015, now at Palo Alto Networks): <a href="https://web.archive.org/web/20151229172446/http://researchcenter.paloaltonetworks.com/2015/11/dormant-malicious-code-discovered-on-thousands-of-websites/"><em>Dormant Malicious Code Discovered on Thousands of Websites</em></a>, Yuchen Zhou and Wei Xu, Palo Alto Networks Blog, 14 November 2015.</p>
<p><center><br />
<img src="//researchcenter.paloaltonetworks.com/wp-content/uploads/2015/11/Screen-Shot-2015-11-13-at-3.58.31-PM-500x241.png" width=500 height=241><br />
</center></p>
<blockquote><p>
During our continuous monitoring for a 24-hour period from November 11, 2015 to November 12, 2015, eight days after the initial discovery, the Chuxiong Archives website consistently presented malicious content injected by an attacker depending on the source IP and user agent. We believe that if a user were to visit the compromised website a second time following the initial exposure to the malicious code, the site would recognize the source IP and user-agent and simply remain dormant, not exhibiting any malicious behavior. Because of this anti-analysis/evasion technique, it may easily cause the belief that a website no longer poses a threat, when it remains infected.
</p>
<p>
At the time of this report, using our malicious web content scanning system, we have already discovered more than four thousands additional, similarly compromised websites globally exhibiting the same ability of being able to be dormant or active depending on source IP and user agent. Investigations regarding this campaign on a larger scale are ongoing and a second report detailing the similarly compromised websites will be published in the near future.
</p></blockquote>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2015/dormant-malicious-code-discovered-on-thousands-of-websites/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SRG at Oakland 2015</title>
		<link>https://www.jeffersonswheel.org/2015/srg-at-oakland-2015</link>
		<comments>https://www.jeffersonswheel.org/2015/srg-at-oakland-2015#comments</comments>
		<pubDate>Sun, 24 May 2015 19:09:17 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Alumni]]></category>
		<category><![CDATA[Conferences]]></category>
		<category><![CDATA[Papers]]></category>
		<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Secure Computation]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Talks]]></category>
		<category><![CDATA[Web Security]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=592</guid>
		<description><![CDATA[Several SRGers were at IEEE Symposium on Security and Privacy (&#8220;Oakland&#8221; in San Jose). Yuchen Zhou presented his work on Understanding and Monitoring Embedded Web Scripts. Yuchen graduated with his PhD the day before the conference, and will be joining Palo Alto Networks. Samee Zahur is a co-author (along with Benjamin Kreuter, who is an [...]]]></description>
				<content:encoded><![CDATA[<p>Several SRGers were at <a href="http://www.ieee-security.org/TC/SP2015/">IEEE Symposium on Security and Privacy</a> (&#8220;Oakland&#8221; in San Jose).</p>
<p>Yuchen Zhou presented his work on <A href="http://scriptinspector.org"><em>Understanding and Monitoring Embedded Web Scripts</em></a>.  Yuchen graduated with his PhD the day before the conference, and will be joining Palo Alto Networks.</p>
<p>Samee Zahur is a co-author (along with Benjamin Kreuter, who is an &#8220;in-progress UVa PhD student&#8221; diverted by Google, and several researchers from Microsoft Research) on the paper, <a href="https://eprint.iacr.org/2014/976.pdf"><em>Geppetto: Versatile Verifiable Computation</em></a>, which was presented by Bryan Parno.</p>
<p>Samee also presented a poster on <a href="http://oblivc.org/">Obliv-C</a>.</p>
<p>Weilin Xu presented a poster on <a href="http://www.ieee-security.org/TC/SP2015/posters/paper_47.pdf"><em>Automatically Evading Classifiers</em></a></p>
<p>It was also great to see SRG alums Yan Huang (who is not at Indiana University, and was a co-author on the paper about <a href="http://homes.soic.indiana.edu/yh33/mypub/oblivm.pdf">ObliVM</a>), Jon McCune (who is now working on trusted computing at Google) and Adrienne Felt (who was the <a href="http://ieee-security.org/TC/SPW2015/W2SP/">keynote speaker for the W2SP workshop</a>, and gave a very interesting talk about user-facing security design and experiments in Google Chrome; Adrienne&#8217;s <a href="http://w2spconf.com/2008/papers/s3p1.pdf">first paper was in W2SP 2008</a> when she was an undergraduate at UVa).</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2015/srg-at-oakland-2015/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Understanding and Monitoring Embedded Web Scripts</title>
		<link>https://www.jeffersonswheel.org/2015/understanding-and-monitoring-embedded-web-scripts</link>
		<comments>https://www.jeffersonswheel.org/2015/understanding-and-monitoring-embedded-web-scripts#comments</comments>
		<pubDate>Fri, 27 Mar 2015 04:54:18 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Conferences]]></category>
		<category><![CDATA[Papers]]></category>
		<category><![CDATA[Privacy]]></category>
		<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Security]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=576</guid>
		<description><![CDATA[Modern web applications make frequent use of third-party scripts, often in ways that allow scripts loaded from external servers to make unrestricted changes to the embedding page and access critical resources including private user information. Our paper describing tools to assist site administrators in understanding, monitoring, and restricting the behavior of third-party scripts embedded in [...]]]></description>
				<content:encoded><![CDATA[<p>Modern web applications make frequent use of third-party scripts, often in ways that allow scripts loaded from external servers to make unrestricted changes to the embedding page and access critical resources including private user information. Our paper describing tools to assist site administrators in understanding, monitoring, and restricting the behavior of third-party scripts embedded in their site, and what we&#8217;ve learned by using them, is now available: Yuchen Zhou and David Evans, <a href="http://www.cs.virginia.edu/~evans/pubs/oakland2015/"><em>Understanding and Monitoring Embedded Web Scripts</em></a>, IEEE Symposium on Security and Privacy 2015.  </p>
<p>Yuchen will present the paper at the <a href="http://www.ieee-security.org/TC/SP2015/">Oakland conference</a> (in San Jose) this May.</p>
<p><center><br />
<a href="http://www.cs.virginia.edu/evans/pubs/oakland2015/overview.png"><img src="http://www.cs.virginia.edu/evans/pubs/oakland2015/overview-small.png" width=538 height=400></a><br />
</center></p>
<p><b>Project Site:</b> <a href="http://scriptinspector.org">ScriptInspector.org</a></p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2015/understanding-and-monitoring-embedded-web-scripts/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Twitter Single Sign-On</title>
		<link>https://www.jeffersonswheel.org/2014/twitter-single-sign-on</link>
		<comments>https://www.jeffersonswheel.org/2014/twitter-single-sign-on#comments</comments>
		<pubDate>Tue, 07 Oct 2014 17:56:57 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Social Networks]]></category>
		<category><![CDATA[Web Security]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=533</guid>
		<description><![CDATA[By Hannah Li Single Sign-On (SSO) services are widely used in modern web applications for authentication and social networking. While implementing a SSO service for a website is moderately straightforward, building it correctly could be tough and mistakes can lead to serious security consequences. Previous research on Facebook SSO revealed several major vulnerabilities which could [...]]]></description>
				<content:encoded><![CDATA[<p><strong>By Hannah Li</strong></p>
<p>
Single Sign-On (SSO) services are widely used in modern web applications for authentication and social networking. While implementing a SSO service for a website is moderately straightforward, building it correctly could be tough and mistakes can lead to serious security consequences. <a href="https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/zhou">Previous research on Facebook SSO</a> revealed several major vulnerabilities which could easily allow an attacker to obtain sensitive user information or to take full control of a user&#8217;s account. These security weaknesses can often lead to token credentials misuse.
</p>
<p>
Because of these findings, I was motivated to discover whether SSO services implemented with other versions of OAuth would exhibit the same security vulnerabilities. I analyzed Twitter SSO, which is implemented using OAuth 1.0A instead of OAuth 2 which is used by Facebook, for similar security weaknesses. I searched for vulnerabilities by building a web application implementing Twitter SSO and by examining the traffic between the client and the server for patterns and token leakages.
</p>
<h3>Twitter SSO Protocol: Tokens</h3>
<p>
The four &#8220;tokens&#8221; which could be used by an attacker are the <b>Consumer Key</b>, <b>Request Token</b>, <b>Verifier</b>, and <b>Access Token</b>, which will be the focus of this analysis. For the rest of this post, Alice is the user and Mallory is the attacker.
</p>
<p>
<em>Consumer Key</em>. The Consumer Key and Secret are given to the application when it registers with Twitter. App developers are instructors to keep this key/secret pair secret and if exposed, to generate another key/secret pair.
</p>
<p>
<em>Request Token</em>. This token also comes in a key/secret pair. This temporary key is issued by Twitter to the application when Alice first requests to sign in with twitter. While the key is shown publicly in the URL, the secret should be kept private.
</p>
<p>
<em>Verifier</em>. The Verifier is a publicly shown key (in the URL) that Twitter issues to confirm that Alice has approved the application.
</p>
<p>
<em>Access Token</em>. This key/secret pair is a more permanent token that allows applications to access protected resources on behalf of Alice.
</p>
<h3>Twitter SSO Protocol: Overview</h3>
<p>The diagram below provides a high-level description for Twitter SSO procedure, breaking up the protocol into three steps, each processing an authentication token. </p>
<p><center><img src="/images/twittersso.png" width="688" height="467"></center></p>
<h3>Twitter SSO Protocol: More Details</h3>
<p>
The diagram below expands each of the three steps. Note that the items written on the arrows do not show a comprehensive list of parameters sent, but rather a few important ones (see <a href="https://dev.twitter.com/web/sign-in/implementing"><em>Implementing Sign in with Twitter Overview</em></a> and <a href="http://oauth.net/core/1.0a/"><em>OAuth Core 1.0a</em></a> for detailed documentation).
</p>
<p><center><A href="/images/twitterprotocol.png"><img src="/images/twitterprotocol-small.png" width="688" height="488"></a></center></p>
<h3>Security Implications</h3>
<p>
To evaluate the security of Twitter&#8217;s SSO implementation, I tried swapping all three tokens for other tokens in different combinations. I did not find any way to use these methods to gain illicit access to private, user information. There are several countermeasures associated with each token that Twitter SSO uses to prevent this type of attack.
</p>
<p>
<b>Request Token.</b> The Request Token must be connected to the Consumer Key and Secret and expires after the first time it is used to request an Access Token. Due to its temporary nature and correspondence with the Consumer Key and Secret, Mallory cannot exploit the system by stealing this Request Token without also knowing the Consumer Key and Secret, which should be kept secret.
</p>
<p>
<b>Verifier.</b> Twitter issues a different Verifier each time, thus preventing a malicious party from reusing the Verifier through an impersonation attack. Even through the Verifier is passed through the URL, like the Request Token, Mallory cannot attack the web application without also knowing the Consumer Key and Secret.
</p>
<p>
<b>Access Token.</b> Each Access Token is connected to a Consumer Key and Secret, which are known only to the application developer. So even if Mallory were to successfully obtain a leaked token over the traffic, she would not be able to use it to log into Alice&#8217;s account.  This is verified with HuffingtonPost.com, which leaks its Access Token pair through its last message to Alice&#8217;s browser. Without this defense, Mallory could have used the leaked Access Token to issue requests to Twitter on behalf of HuffingtonPost.com and Alice.
</p>
<p>
The last precaution also proved to be useful in another serious mistake in the SSO service. Many tests found that when an application uses the Access Token to request Alice’s information or post on her behalf, Twitter does not check the Access Token Secret, as only providing the Access Token is enough to give the client permission. </p>
<p>
This may not pose a realistic security threat because the entire Access Token key pair is typically kept secret, so in order to take advantage of this mistake, Mallory would need to find the Consumer Key and Secret as well. To make the entire system more secure, it is recommended that Twitter verify the Access Token Secret, as many keys and secrets are accidentally leaked through GitHub and even mobile applications when the developers are not careful. When Mallory has both the Access Token and Consumer Key token/secret pairs, it would be much easier to attack a web application.
</p>
<p>
Though checking the Access Token against the Consumer Key makes SSO safer to use, it has its weaknesses as well. Mobile Applications are easy to reverse engineer since the client code must be made available. If an application needs the Consumer Key to implement SSO, then there is no possible way to build a client-only secure application with SSO since the Consumer Key must be in the code. The secure approach re-routes requests through an application server, which can securely store the key and add it to the requests sent to Twitter. This adds an extra step to app building and many developers may not realize the importance in not including the Consumer Key in the application code.
</p>
<p>
A <a href="http://www.cs.columbia.edu/~nieh/pubs/sigmetrics2014_playdrone.pdf">recent study from Columbia</a> (Nicolas Viennot, Edward Garcia, and Jason Nieh. <em>A Measurement Study of Google Play</em>. ACM SIGMETRICS, June 2014) scanned thousands of applications in the Google Play Store for token and secret leakages, supports the conclusion that requiring a Consumer Key from the client often leads to faulty implementations.  They discovered 1,477 Facebook credentials and 28,235 Twitter credentials among all the free applications when the Facebook SDK is used twice as much as the Twitter4J Library. While their explanation of the significant difference in credentials found makes sense, a more reasonable explanation is that without using a server, it is impossible to implement a Twitter SSO without including the Consumer Key in the code.
 </p>
<h4>Conclusion</h4>
<p>
While Twitter&#8217;s implementation of SSO has security advantages for web applications, it is dangerous for mobile applications. There are two clear options an API developer could use to make an authentication protocol: either you require the server to verify the Consumer Key and Secret during each step of the procedure, or you don’t, hoping that Mallory does not gain access to key information. The latter option, however, leads to <a href="http://www.ssoscan.org">many vulnerabilities as clearly seen with Facebook SSO</a>. The first, seemingly more secure, choice causes mobile applications to sacrifice the security of an OAuth protocol.</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2014/twitter-single-sign-on/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>SSOScan: Automated Testing of Web Applications for Single Sign-On Vulnerabilities</title>
		<link>https://www.jeffersonswheel.org/2014/ssoscan-automated-testing-of-web-applications-for-single-sign-on-vulnerabilities</link>
		<comments>https://www.jeffersonswheel.org/2014/ssoscan-automated-testing-of-web-applications-for-single-sign-on-vulnerabilities#comments</comments>
		<pubDate>Fri, 16 May 2014 00:25:38 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Web Security]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=517</guid>
		<description><![CDATA[Our paper on automated testing of web applications has been accepted to the 2014 USENIX Security Symposium. [Update: the final version of the paper is available here.] It describes a black-box technique for automatically scanning web sites for vulnerabilties in how they implement Facebook Single Sign-On, and results from our experiments running it on thousands [...]]]></description>
				<content:encoded><![CDATA[<p>Our paper on automated testing of web applications has been accepted to the <a href="https://www.usenix.org/conference/usenixsecurity14">2014 USENIX Security Symposium</a>.  [Update: the final version of the paper is available <a href="http://www.cs.virginia.edu/~evans/pubs/usenix2014/">here</a>.]</p>
<p>It describes a black-box technique for automatically scanning web sites for <a href="http://ssoscan.org/vul.html">vulnerabilties</a> in how they implement Facebook Single Sign-On, and results from our experiments running it on thousands of websites.</p>
<p><center><br />
<img src="http://ssoscan.org/result.png" width=650><br />
</center></p>
<p>You can try the scanner at <a href="http://ssoscan.org">SSOScan.org</a>.</p>
<p>Yuchen Zhou will present the paper at USENIX Security in San Diego, 20-22 August 2014.</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2014/ssoscan-automated-testing-of-web-applications-for-single-sign-on-vulnerabilities/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>GuardRails now available!</title>
		<link>https://www.jeffersonswheel.org/2011/guardrails-now-available</link>
		<comments>https://www.jeffersonswheel.org/2011/guardrails-now-available#comments</comments>
		<pubDate>Fri, 22 Apr 2011 17:48:20 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[GuardRails]]></category>
		<category><![CDATA[Papers]]></category>
		<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Security]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=184</guid>
		<description><![CDATA[The first release of the GuardRails source code is now available at https://github.com/guardrails/guardrails. GuardRails was developed by Jonathan Burket, Patrick Mutchler, Michael Weaver, and Muzzammil Zaveri. GuardRails is a web application framework that extends Ruby on Rails to provide automatic support for data-centric security policies. Developers add annotations to their data models to describe their [...]]]></description>
				<content:encoded><![CDATA[<p>The first release of the GuardRails source code is now available at <a href="https://github.com/guardrails/guardrails"><em>https://github.com/guardrails/guardrails</em></a>.  GuardRails was developed by Jonathan Burket, Patrick Mutchler, Michael Weaver, and Muzzammil Zaveri.
</p>
<p>
<a href="http://guardrails.cs.virginia.edu">GuardRails</a> is a web application framework that extends Ruby on Rails to provide automatic support for data-centric security policies.  Developers add annotations to their data models to describe their security policies, and GuardRails performs a source-to-source transformation to enforce those policies throughout the application.  There will be a paper at USENIX WebApps 2011, <em>GuardRails: A Data-Centric Web Application Security Framework</em>, available soon, that provides more details.</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2011/guardrails-now-available/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>GuardRails at OWASP AppSec DC</title>
		<link>https://www.jeffersonswheel.org/2010/guardrails-at-owasp-appsec-dc</link>
		<comments>https://www.jeffersonswheel.org/2010/guardrails-at-owasp-appsec-dc#comments</comments>
		<pubDate>Wed, 10 Nov 2010 00:00:54 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Conferences]]></category>
		<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Software Engineering]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=156</guid>
		<description><![CDATA[Jonathan Burket, Patrick Mutchler, Michael Weaver and Muzzammil Zaveri will present GuardRails at AppSec DC on Wednesday, 10 November. The conference is at the Walter E. Washington Convention Center in Washington, DC. GuardRails is a framework for automating many of the tasks necessary to build a security web application. For more, see the talk abstract: [...]]]></description>
				<content:encoded><![CDATA[<p>Jonathan Burket, Patrick Mutchler, Michael Weaver and Muzzammil Zaveri will present GuardRails at AppSec DC on Wednesday, 10 November.  The conference is at the Walter E. Washington Convention Center in Washington, DC.</p>
<p>GuardRails is a framework for automating many of the tasks necessary to build a security web application.  For more, see the talk abstract: <a href="http://www.owasp.org/index.php/GuardRails:_A_Nearly_Painless_Solution_to_Insecure_Web_Applications"><em>GuardRails: A Nearly Painless Solution to Insecure Web Applications</em></a>.  (and video and slides will appear there soon)</p>
<p><b>Update 9 December:</b> The slides are <a href="http://www.owasp.org/images/c/cd/Guardrails_owasp_final.pdf">here [PDF]</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2010/guardrails-at-owasp-appsec-dc/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Interview on Program Analysis Tools</title>
		<link>https://www.jeffersonswheel.org/2008/interview-on-program-analysis-tools</link>
		<comments>https://www.jeffersonswheel.org/2008/interview-on-program-analysis-tools#comments</comments>
		<pubDate>Tue, 03 Jun 2008 01:22:45 +0000</pubDate>
		<dc:creator>David Evans</dc:creator>
				<category><![CDATA[Program Analysis]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[Software Engineering]]></category>

		<guid isPermaLink="false">http://www.jeffersonswheel.org/?p=62</guid>
		<description><![CDATA[Electronic Design has an interview with me: Electronic Design Interviews U. of Virginia Computer Prof, Electronic Design, 21 May 2008. The interview focuses on the history of Splint, and the current state and future of program analysis tools.]]></description>
				<content:encoded><![CDATA[<p>Electronic Design has an interview with me: <a href="http://electronicdesign.com/Articles/Print.cfm?ArticleID=19027"><em>Electronic Design Interviews U. of Virginia Computer Prof</em></a>, Electronic Design, 21 May 2008.  The interview focuses on the history of Splint, and the current state and future of program analysis tools.</p>
]]></content:encoded>
			<wfw:commentRss>https://www.jeffersonswheel.org/2008/interview-on-program-analysis-tools/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
